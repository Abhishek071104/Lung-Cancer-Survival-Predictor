# -*- coding: utf-8 -*-
"""Lung-Cancer-Survival-Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1caL0YyDjK1Tcv2dFk6my0k7CfKhJfb1U
"""

# Step 1: Install and import necessary libraries
!pip install -q scikit-learn imbalanced-learn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.ensemble import RandomForestClassifier
from imblearn.over_sampling import SMOTE

import warnings
warnings.filterwarnings('ignore')

# Step 2: Load data
df = pd.read_csv('/content/dataset_med.csv')

df = df.sample(frac=0.1, random_state=42).reset_index(drop=True)
print("Reduced dataset shape:", df.shape)
print(df.info())
df.head()

# Step 3: Handling missing values
print(df.isnull().sum())

# Drop rows with missing target
df = df.dropna(subset=['survived'])

# Fill missing numerical with median
num_cols = df.select_dtypes(include=['float64', 'int64']).columns
df[num_cols] = df[num_cols].fillna(df[num_cols].median())

# Fill categorical with mode
cat_cols = df.select_dtypes(include=['object']).columns
for col in cat_cols:
    df[col] = df[col].fillna(df[col].mode()[0])

# Step 4: Encode categorical columns
le = LabelEncoder()
for col in df.select_dtypes(include='object').columns:
    df[col] = le.fit_transform(df[col])

# Step 5: Define features and target
X = df.drop(['id', 'survived', 'diagnosis_date', 'end_treatment_date'], axis=1)
y = df['survived']

# Optional: Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 6: Apply SMOTE
sm = SMOTE(random_state=42)
X_resampled, y_resampled = sm.fit_resample(X_scaled, y)

# Step 7: Split into train and test
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42, stratify=y_resampled)

# Step 8: Train a Random Forest Classifier
model = RandomForestClassifier(random_state=42, n_estimators=40)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Step 9: Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Feature Importance
feat_imp = pd.Series(model.feature_importances_, index=X.columns)
feat_imp.nlargest(10).plot(kind='barh')
plt.title("Top 10 Important Features")
plt.show()

import joblib
joblib.dump(model, 'model.pkl')
joblib.dump(scaler, 'scaler.pkl')

import joblib

# Save model with compression (level: 3 is a good balance)
joblib.dump(model, 'model.pkl', compress=3)